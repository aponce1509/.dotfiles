{
    // VS Code general
    "files.eol": "\n",
    "workbench.settings.editor": "json",
    // VS Code Editor
    "editor.rulers": [80, 88, 120],
    "editor.inlayHints.enabled": "offUnlessPressed",
    "editor.codeActionWidget.showHeaders": false,
    "editor.inlineSuggest.enabled": true,
    "editor.lineNumbers": "relative",
    "editor.minimap.enabled": false,
    "editor.formatOnSave": true,
    "editor.fontLigatures": "'calt', 'liga', 'dlig', 'ss01', 'ss02'",
    "editor.fontFamily": "'Monaspace Neon', monospace",
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.suggest.insertMode": "replace",
    // "workbench.editor.limit.value": 3,
    "workbench.editor.limit.enabled": true,
    "editor.stickyScroll.enabled": true,
    "workbench.tree.enableStickyScroll": true,
    "workbench.editor.pinnedTabsOnSeparateRow": true,
    // Project Manager
    "projectManager.git.baseFolders": ["$home/home"],
    "projectManager.sortList": "Recent",
    // Python
    "[python]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "ms-python.black-formatter",
        "editor.formatOnType": true
    },
    "black-formatter.args": ["--line-length", "88"],
    "python.languageServer": "Pylance",
    // "python.analysis.typeCheckingMode": "strict",
    // "python.linting.mypyArgs": [
    "mypy-type-checker.args": [
        "--follow-imports=silent",
        "--ignore-missing-imports",
        "--show-column-numbers",
        "--no-pretty",
        "--strict"
    ],
    "python.analysis.autoFormatStrings": true,
    "mypy.runUsingActiveInterpreter": true,
    "python.analysis.completeFunctionParens": true,
    "python.analysis.inlayHints.callArgumentNames": "all",
    "python.analysis.inlayHints.functionReturnTypes": true,
    "python.analysis.inlayHints.pytestParameters": true,
    "python.analysis.inlayHints.variableTypes": true,
    // Markdown
    "[md]": { "editor.formatOnSave": false },
    "markdown-preview-enhanced.previewTheme": "atom-dark.css",
    "[markdown]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        // quickSuggestions true will provide suggestions as you type.
        // If you turn this on and DO NOT want suggestions
        // for non-wiki-link, non-tag words,
        "editor.formatOnSave": false,
        "editor.quickSuggestions": {
            "other": true,
            "comments": true,
            "strings": true
        },
        // This is poorly documented, but seems to offer suggestions
        // from any word in open document when turned on, which
        // can be a little distracting in markdown docs:
        "editor.wordBasedSuggestions": "off",
        "editor.tabSize": 2
        // Set this to false if you turn on quickSuggestions
        // but don't want suggestions for markdown related snippets
        // as you type:
        // "editor.suggest.showSnippets": false
    },
    // Terraform
    "[terraform]": {
        "editor.defaultFormatter": "hashicorp.terraform",
        "editor.tabSize": 2
    },
    // Terminal
    // "terminal.integrated.defaultLocation": "editor",
    "terminal.explorerKind": "external",
    "terminal.integrated.inheritEnv": false,
    "terminal.external.osxExec": "iterm.app",
    // Git
    "git.autofetch": true,
    "git.ignoreRebaseWarning": true,
    "git.confirmSync": false,
    // Jupyter
    "jupyter.askForKernelRestart": false,
    "jupyter.notebookFileRoot": "${workspaceFolder}",
    "jupyter.interactiveWindow.creationMode": "perFile",
    "jupyter.widgetScriptSources": ["jsdelivr.com", "unpkg.com"],
    // VS Code Theme
    "workbench.colorTheme": "GitHub Dark Default",
    "workbench.iconTheme": "vscode-icons",
    "vsicons.dontShowNewVersionMessage": true,
    // Prettier
    "prettier.jsxSingleQuote": true,
    "prettier.tabWidth": 4,
    // NeoVim
    "extensions.experimental.affinity": {
        "asvetliakov.vscode-neovim": 1
    },
    // Spelling
    "cSpell.language": " \"en,es\"",
    "cSpell.userWords": [
        "dtypes",
        "inicializaciones",
        "mlflow",
        "neovim",
        "sessionx",
        "sklearn",
        "wandb",
        "Yabai"
    ],
    // GitHub
    "githubIssues.queries": [
        {
            "label": "Mis incidencias",
            "query": "default"
        },
        {
            "label": "Problemas creados",
            "query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
        },
        {
            "label": "Problemas recientes",
            "query": "state:open repo:${owner}/${repository} sort:updated-desc"
        }
    ],
    // Rust
    "[rust]": {
        "editor.defaultFormatter": "rust-lang.rust-analyzer"
    },
    // AWS
    "aws.telemetry": false,
    // Yaml
    "yaml.customTags": [
        "!And",
        "!And sequence",
        "!If",
        "!If sequence",
        "!Not",
        "!Not sequence",
        "!Equals",
        "!Equals sequence",
        "!Or",
        "!Or sequence",
        "!FindInMap",
        "!FindInMap sequence",
        "!Base64",
        "!Join",
        "!Join sequence",
        "!Cidr",
        "!Ref",
        "!Sub",
        "!Sub sequence",
        "!GetAtt",
        "!GetAZs",
        "!ImportValue",
        "!ImportValue sequence",
        "!Select",
        "!Select sequence",
        "!Split",
        "!Split sequence"
    ],
    // Lua
    "[lua]": {
        "editor.defaultFormatter": "yinfei.luahelper"
    },
    // Vim
    "vim.leader": "<Space>",
    "vim.useSystemClipboard": true,
    "vim.hlsearch": true,
    "vim.insertModeKeyBindings": [
        {
            "before": ["j", "j"],
            "after": ["<esc>"]
        },
        { "before": ["g", "g"], "commands": ["editor.action.triggerSuggest"] }
    ],
    "vim.normalModeKeyBindingsNonRecursive": [
        // NAVIGATION
        // switch b/w buffers
        { "before": ["<S-h>"], "commands": [":bprevious"] },
        { "before": ["<S-l>"], "commands": [":bnext"] },

        // splits
        { "before": ["leader", "v"], "commands": [":vsplit"] },
        { "before": ["leader", "s"], "commands": [":split"] },

        // panes

        {
            "before": ["leader", "j"],
            "commands": ["workbench.action.focusBelowGroup"]
        },
        {
            "before": ["leader", "m"],
            "commands": ["workbench.action.pinEditor"]
        },
        {
            "before": ["leader", "n"],
            "commands": ["workbench.action.unpinEditor"]
        },
        {
            "before": ["leader", "k"],
            "commands": ["workbench.action.focusAboveGroup"]
        },
        {
            "before": ["leader", "l"],
            "commands": ["workbench.action.focusRightGroup"]
        },
        // NICE TO HAVE
        { "before": ["leader", "w"], "commands": [":w!"] },
        { "before": ["leader", "q"], "commands": [":q!"] },
        { "before": ["leader", "x"], "commands": [":x"] },
        {
            "before": ["[", "d"],
            "commands": ["editor.action.marker.prev"]
        },
        {
            "before": ["]", "d"],
            "commands": ["editor.action.marker.next"]
        },
        {
            "before": ["<leader>", "."],
            "commands": ["editor.action.quickFix"]
        },
        {
            "before": ["leader", "f"],
            "commands": ["workbench.action.quickOpen"]
        },
        {
            "before": ["leader", "p"],
            "commands": ["editor.action.formatDocument"]
        },
        {
            "before": ["g", "h"],
            "commands": ["editor.action.showDefinitionPreviewHover"]
        },
        { "before": ["leader", "/"], "commands": ["editor.action.commentLine"] }
    ],
    "vim.visualModeKeyBindings": [
        // Stay in visual mode while indenting
        { "before": ["<"], "commands": ["editor.action.outdentLines"] },
        { "before": [">"], "commands": ["editor.action.indentLines"] },
        // Move selected lines while staying in visual mode
        { "before": ["J"], "commands": ["editor.action.moveLinesDownAction"] },
        { "before": ["K"], "commands": ["editor.action.moveLinesUpAction"] },
        // toggle comment selection
        { "before": ["leader", "/"], "commands": ["editor.action.commentLine"] }
    ],
    "git.suggestSmartCommit": false,
    "terminal.integrated.fontFamily": "Hack Nerd Font"
}
